mysql
sudo service mysql start
mysql -p


1. 도커 설치
https://www.bsidesoft.com/?p=7820

오래된 버전의 도커 지우기top
docker, docker.io 또는 docker-engine과 같은 오래된 버전은 아래 명령으로 지웁시다. 기존 이미지, 컨테이너, 볼륨 및 네트워크를 포함한 콘텐츠들은 /var/lib/docker/ 디렉터리에 보존되기 때문에 이 명령을 안심하고 쓰셔도 됩니다.

$ sudo apt-get remove docker docker-engine docker.io containerd runc
저장소를 사용하여 도커 설치하기top
Docker CE를 설치하기 전에 먼저 도커 저장소(repository)를 설정해야 합니다. 그런 후에 저장소로부터 도커를 설치하거나 업데이트할 수 있습니다.

저장소 설정
오래된 버전은 이미 삭제되어 있다고 가정하고 진행합니다.
먼저, apt 패키지를 업데이트합니다.

$ sudo apt-get update
apt가 HTTPS를 통해 저장소를 사용할 수 있도록 패키지를 설치합니다.

$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
도커의 공식 GPG 키를 추가합니다.

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88에서 마지막 8자를 검색하여 fingerprint 인식 키가 있는지 확인하십시오.

$ sudo apt-key fingerprint 0EBFCD88
pub   rsa4096 2017-02-22 [SCEA]
      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid           [ unknown] Docker Release (CE deb) <docker@docker.com>
sub   rsa4096 2017-02-22 [S]
안정화된 저장소로 설정하려면 다음 명령을 사용하세요.
제 서버의 아키텍처가 x86_64(amd64) 임을 감안해야 했습니다.

$ sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
위 아키텍처가 armhf, ppc65le 390x에 따라 명령에서 arch의 값을 해당 아키텍처로 할당하셔서 실행하면 되겠습니다.

도커 저장소 설정이 완료되었습니다.

Docker CE 설치하기
먼저 apt 패키지를 업데이트합니다.

$ sudo apt-get update
Docker CE 최신 버전을 설치합니다. 아니면 다음 단계로 가서 특정 버전을 설치하세요.

$ sudo apt-get install docker-ce docker-ce-cli containerd.io

참고로 apt-get install 또는 apt-get update 명령으로 버전을 지정하지 않고 설치 또는 업데이트를 하면 항상 최신 버전이 설치되므로 안정성 측면에서 적합하지 않을 수도 있습니다.

만약 특정 버전으로 설치하려면 다음 두 단계로 진행하세요.

a. 저장소에 사용 가능한 버전 리스트를 봅니다.

$ apt-cache madison docker-ce
 docker-ce | 5:18.09.2~3-0~ubuntu-cosmic | https://download.docker.com/linux/ubuntu cosmic/stable amd64 Packages
 docker-ce | 5:18.09.2~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages
 docker-ce | 5:18.09.1~3-0~ubuntu-cosmic | https://download.docker.com/linux/ubuntu cosmic/stable amd64 Packages
 docker-ce | 5:18.09.1~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages
 docker-ce | 5:18.09.0~3-0~ubuntu-bionic | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages
 docker-ce | 18.06.2~ce~3-0~ubuntu | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages
 docker-ce | 18.06.1~ce~3-0~ubuntu | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages
 docker-ce | 18.06.0~ce~3-0~ubuntu | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages
 docker-ce | 18.03.1~ce~3-0~ubuntu | https://download.docker.com/linux/ubuntu bionic/stable amd64 Packages
b. 두 번째 열의 버전 문자열을 사용하여 특정 버전을 설치합니다 (예 : 5 : 18.09.1 ~ 3-0 ~ ubuntu-xenial).

$ sudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=<VERSION_STRING> containerd.io
설치된 Docker CE 버전 확인
이제 설치가 완료되었습니다. 잘 설치되었는지 docker 명령을 통해 확인할 수 있습니다. 가장 단순하게는 버전을 보면 되겠습니다.

$ sudo docker version
Client:
 Version:           18.09.2
 API version:       1.39
 Go version:        go1.10.6
 Git commit:        6247962
 Built:             Sun Feb 10 04:13:46 2019
 OS/Arch:           linux/amd64
 Experimental:      false
 
Server: Docker Engine - Community
 Engine:
  Version:          18.09.2
  API version:      1.39 (minimum version 1.12)
  Go version:       go1.10.6
  Git commit:       6247962
  Built:            Sun Feb 10 03:42:13 2019
  OS/Arch:          linux/amd64
  Experimental:     false
위처럼 Client와 Server 정보가 제대로 나온다면 설치가 완료된 것입니다. 만약 아래처럼 에러 난다면 도커 소켓 연결에 문제가 있음을 뜻합니다.

# sudo docker version
Client:
 Version:           18.06.1-ce
 API version:       1.38
 Go version:        go1.10.4
 Git commit:        e68fc7a
 Built:             Wed Sep 26 01:43:33 2018
 OS/Arch:           linux/amd64
 Experimental:      false
Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
그럼 아래처럼 해보세요.

# sudo systemctl unmask docker.service
# sudo systemctl unmask docker.socket
# sudo systemctl start docker.service
# sudo docker version
(정상적으로 나오는지 확인!)
축하합니다. Docker CE를 성공적으로 설치 완료했습니다.

도커 명령어 확인해 보기top
앞서 설치된 도커의 버전을 확인해 봤지만 기본적으로 도커는 직관적인 명령으로 사용하기 굉장히 편합니다. 도커는 아래 명령과 옵션의 나열 형태로 사용합니다.

docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
도커에서 제공되는 옵션과 명령 종류를 확인하려면 아래처럼 해보세요.

$ sudo docker
Usage:  docker [OPTIONS] COMMAND
 
A self-sufficient runtime for containers
 
Options:
      --config string      Location of client config files (default "/home/boeunee/.docker")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/home/boeunee/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/home/boeunee/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/home/boeunee/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit
 
Management Commands:
  builder     Manage builds
  config      Manage Docker configs
  container   Manage containers
  engine      Manage the docker engine
  image       Manage images
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes
 
Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes
 
Run 'docker COMMAND --help' for more information on a command.
이렇게 나열된 명령과 옵션으로 우리는 도커 이미지와 컨테이너를 생성하고 관리할 수 있습니다.

사용자를 도커 그룹에 추가하기top
이것은 선택사양입니다.

docker 그룹은 docker 설치시 이미 추가 되어 있습니다.

$ cat /etc/group
...
docker:x:997:
현재는 도커는 root만 사용할 수 있습니다. 만약 접속한 계정의 사용자가 사용하길 원한다면 다음 명령을 수행하세요.

$ sudo usermod -aG docker $USER
옵션 -aG는 그룹에 추가한다는 의미입니다. 이렇게 하면 현재 사용자를 docker 그룹에 추가됩니다. 현재 사용자가 jidolstar라면 위 명령 실행 후 보면 아래처럼 jidolstar가 추가되어 있을 겁니다.

$ cat /etc/group
...
docker:x:997:jidolstar
이제 아래처럼 도커를 재실행을 하면 root가 아닌 jidolstar도 도커 명령을 사용할 수 있게 됩니다.

$ sudo service docker restart
이제 sudo 없이 docker version만 해보세요.

$ docker version
Client:
 Version:           18.09.2
 API version:       1.39
 Go version:        go1.10.6
 Git commit:        6247962
 Built:             Sun Feb 10 04:13:46 2019
 OS/Arch:           linux/amd64
 Experimental:      false
 
Server: Docker Engine - Community
 Engine:
  Version:          18.09.2
  API version:      1.39 (minimum version 1.12)
  Go version:       go1.10.6
  Git commit:       6247962
  Built:            Sun Feb 10 03:42:13 2019
  OS/Arch:          linux/amd64
  Experimental:     false
만약 “Got permission denied while trying to connect to the Docker daemon socket” 관련 에러가 뜨면, 로그아웃 후 다시 로그인 하시거나 그래도 안되면 reboot 해보시기 바랍니다.

도커 삭제하기top
Docker CE 패키지는 다음 명령으로 삭제할 수 있습니다.

$ sudo apt-get purge docker-ce
호스트의 이미지, 컨테이너, 볼륨 또는 사용자 정의된 구성 파일은 자동으로 삭제되지 않습니다. 도커를 삭제한다고 이들이 삭제되는 것은 아니죠. 삭제하시려면 다음 명령을 수행하세요(심사숙고하십시오!).

$ sudo rm -rf /var/lib/docker
