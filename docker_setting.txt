$vi app.py
from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello World!"

if __name__=='__main__':
    app.run(debug=True,host='0.0.0.0')

///////////////////////////////////////////////////////

$vi Dockerfile
FROM python
COPY . /app
WORKDIR /app
RUN pip install flask
EXPOSE 5000
CMD ["python", "app.py"]

///////////////////////////////////////////////////////

1: python이 설치되어 있는 이미지를 다운
2: 현재 디렉토리 하위를 python 이미지 안의 app 디렉토리에 복사
3: 이미지 안에서의 디렉토리 변경(change directory)
4: pip install flask라는 명령어를 실행 (python-flask 설치)
5: 컨테이너의 5000번 포트 개방(flask default port)
6: flask 앱 실행 (이때 app.py는 2번째 줄에서 복사된 파일이다)

docker 이미지 빌드 및 구동
$ docker build -t flask-test .
$ docker images
$ docker run -d -p 5000:5000 flask-test
$ docker ps


##################

NCP 공인 ip : 27.96.135.53

ssh -l root -p 5000 106.10.32.149

- 도커에 우분투 설치 : docker run ubuntu:16.04
- 도커 컨테이너 삭제 : docker rm (컨테이너 id) -f
- 도커 이미지 삭제 : docker rmi (이미지 id)

. 이번에는 /bin/bash 명령어를 입력해서 ubuntu:16.04 컨테이너를 실행
- docker run --rm -it ubuntu:16.04 /bin/bash

mysql root 암호 - malice77
. mysql 설치
docker run -d -p 3306:3306 \
  -e MYSQL_ALLOW_EMPTY_PASSWORD=true \
  --name mysql \
  mysql:5.7

. 우분투 재시작
- sudo shutdown -r now

- 파이썬 다운로드 및 실행 : docker run -it python
- quit(): 파이썬 콘솔을 종료시키는 명령어입니다.
- docker start (컨테이너 ID): 종료된 컨테이너를 재시작하는 명령어입니다.
- docker attach (컨테이너 ID): 특정 컨테이너로 재접속하는 명령어입니다.
- docker exec -it (컨테이너 ID) bash: 실행 중인 컨테이너에 배시(Bash) 쉘로 접속하는 명령어입니다.

- 도커 이미지 생성 : docker build --tag myubuntu:16.04 .
- 도커 생성 이미지 실행 : docker run --name (컨테이너 이름) -d -p 80:80 (이미지 이름):(버전 정보)
- 도커 이미지 삭제 : docker rmi (이미지id)

- 백그라운드 프로세스 확인 및 종료 : ps -ef | grep filename
kill 프로세스아이디


※ 도커파일 명령어 알아보기 ※
- FROM: 베이스 이미지를 지정하는 명령어입니다. FROM ubuntu:14.04와 같은 방식으로 사용하고, 버전으로는 latest를 넣을 수도 있습니다. 하지만 가능하면 14.04와 같은 정확한 버전명을 기입하는 것이 좋습니다.
- RUN: 이미지 상의 리눅스 커맨드를 실행하도록 해주는 명령어입니다.
  예를 들어 RUN apt-get -y fortune을 하면 리눅스에서 fortune 라이브러리를 다운로드 받게 됩니다. 이 때 RUN 명령어는 일반적으로 한 번 사용될 때마다 레이어가 하나씩 추가됩니다. 그래서 RUN 명령어를 어떻게 쓰냐에 따라서 이미지의 크기가 달라질 수 있습니다. 그러므로 여러 개의 명령어가 이어지는 경우 다음과 같이 &&를 이용해 하나의 라인에 명령어를 쓰는 것이 좋습니다.
  RUN apt-get update && apt-get install -y fortune
- CMD: 이미지 명령을 지정하기 위해 사용하는 명령어입니다. 예를 들어 CMD ["nginx"]라고 입력하면 nginx 서버를 실질적으로 구동시키게 되는 것입니다.
- EXPOSE: 컨테이너에서 공개하고자 하는 포트를 정의하기 위해 사용하는 명령어입니다. 80, 443 등의 포트가 일반적으로 많이 사용됩니다.
- ENV: 환경변수를 정의하기 위해 사용하는 명령어입니다. 'ENV NGINX_VERSION (버전명)'과 같은 방식으로 사용할 수 있습니다.
- ADD, COPY: 이미지 안에 파일을 복사하고자 할 때 사용할 수 있는 명령어입니다. 'COPY jerkins.sh /user/local/bin/jenkins.sh'와 같은 방식으로 사용할 수 있습니다. 이 때 압축을 풀 필요 없이 단순히 이미지 안에 넣을 때는 COPY를 쓰고, 압축까지 푸는 등 후처리가 필요하다면 ADD를 사용합니다.
- WORKDIR: 작업위치를 지정할 때 사용하는 명령어입니다.
- ONBULID: 이미지 빌드 이후에 실행되는 명령을 지정하기 위해 사용하는 명령어입니다.
- ENTRYPOINT: 이미지 실행 명령을 다시 지정하기 위해 사용하는 명령어입니다. 기본적으로 이미지는 한 번 만들어지면 수정할 수 없다는 점에서 마치 프로그램을 작성하듯이 쉘 스크립트를 작성하여 엔트리 포인트로 걸어놓고 사용할 수 있습니다. 아까 다루었던 예시에서 cowsay에 다른 명령을 이용해 적용했던 것을 떠올리시면 됩니다.
- VOLUME: 바인딩하고자 하는 디렉토리를 정의할 때 사용하는 명령어입니다. 흔히 리눅스에서의 마운트를 생각하시면 됩니다. 컨테이너 자체는 stateless한 특성을 가지고 있습니다. 하지만 특정한 데이터를 저장하는 등의 기능이 필요하다면 호스트 서버의 특정 위치와 컨테이너의 특정 위치를 마운팅 시킬 수 있습니다. 이는 실제로 굉장히 많이 사용되는 요소 중 하나입니다.
- USER: 사용자를 지정하기 위해 사용하는 명령어입니다. 별도로 지정하지 않으면 사용자는 기본적으로 'docker'로 설정됩니다. 기본적으로 docker라는 하나의 사용자가 있다고 가정을 하고 동작하고, 이러한 docker 사용자가 없거나 현재 사용자가 docker 그룹에 포함 되어 있지 않다면 Permission 오류가 발생할 수 있습니다. 

도커 기본 사용법
https://nicewoong.github.io/development/2017/10/09/basic-usage-for-docker/



